# HG changeset patch
# Parent e64a756d6ecc8b78e2c0280b1335290b1db8c5ab
# User Antonio M. Amaya <amac@tid.es>
Bug 1022791 - Keep previous values for PROMPT permissions on system updates

diff --git a/dom/apps/PermissionsInstaller.jsm b/dom/apps/PermissionsInstaller.jsm
--- a/dom/apps/PermissionsInstaller.jsm
+++ b/dom/apps/PermissionsInstaller.jsm
@@ -37,18 +37,18 @@ this.PermissionsInstaller = {
    *        The just-installed app configuration.
    *        The properties used are manifestURL, origin and manifest.
    * @param boolean aIsReinstall
    *        Indicates the app was just re-installed
    * @param function aOnError
    *        A function called if an error occurs
    * @returns void
    **/
-  installPermissions: function installPermissions(aApp, aIsReinstall, aOnError,
-                                                  aIsSystemUpdate) {
+  installPermissions: function installPermissions(aApp, aIsReinstall,
+                                                  aOnError) {
     try {
       let newManifest =
         new ManifestHelper(aApp.manifest, aApp.origin, aApp.manifestURL);
       if (!newManifest.permissions && !aIsReinstall) {
         return;
       }
 
       if (aIsReinstall) {
@@ -148,19 +148,22 @@ this.PermissionsInstaller = {
           // * The app is privileged
           let permission =
             aApp.isPreinstalled && isPromptPermission &&
             appStatus === "privileged"
                 ? PermissionsTable[permName]["certified"]
                 : PermissionsTable[permName][appStatus];
 
           let permValue = PERM_TO_STRING[permission];
-          if (!aIsSystemUpdate && isPromptPermission) {
-            // If it's not a system update, then we should keep the prompt
-            // permissions that have been granted or denied previously.
+          if (isPromptPermission) {
+            // If the permission is prompt, keep the current value. This will
+            // work even on a system update, with the caveat that if a
+            // ALLOW/DENY permission is changed to PROMPT then the system should
+            // inform the user that he can now change a permission that he could
+            // not change before.
             permValue =
               PermissionSettingsModule.getPermission(expandedPermNames[idx],
                                                      aApp.manifestURL,
                                                      aApp.origin,
                                                      false);
             if (permValue === "unknown") {
               permValue = PERM_TO_STRING[permission];
             }
diff --git a/dom/apps/Webapps.jsm b/dom/apps/Webapps.jsm
--- a/dom/apps/Webapps.jsm
+++ b/dom/apps/Webapps.jsm
@@ -426,33 +426,32 @@ this.DOMApplicationRegistry = {
         kind = this.kTrustedHosted;
       } else if (aManifest.appcache_path) {
         kind = this.kHostedAppcache;
       }
       return kind;
     }
   },
 
-  updatePermissionsForApp: function(aId, aIsPreinstalled, aIsSystemUpdate) {
+  updatePermissionsForApp: function(aId, aIsPreinstalled) {
     if (!this.webapps[aId]) {
       return;
     }
 
     // Install the permissions for this app, as if we were updating
     // to cleanup the old ones if needed.
     // TODO It's not clear what this should do when there are multiple profiles.
     if (supportUseCurrentProfile()) {
       this._readManifests([{ id: aId }]).then((aResult) => {
         let data = aResult[0];
         PermissionsInstaller.installPermissions({
           manifest: data.manifest,
           manifestURL: this.webapps[aId].manifestURL,
           origin: this.webapps[aId].origin,
           isPreinstalled: aIsPreinstalled,
-          isSystemUpdate: aIsSystemUpdate,
           kind: this.webapps[aId].kind
         }, true, function() {
           debug("Error installing permissions for " + aId);
         });
       });
     }
   },
 
@@ -707,18 +706,17 @@ this.DOMApplicationRegistry = {
         // At first run, install preloaded apps and set up their permissions.
         for (let id in this.webapps) {
           let isPreinstalled = this.installPreinstalledApp(id);
           this.removeIfHttpsDuplicate(id);
           if (!this.webapps[id]) {
             continue;
           }
           this.updateOfflineCacheForApp(id);
-          this.updatePermissionsForApp(id, isPreinstalled,
-                                       true /* isSystemUpdate */);
+          this.updatePermissionsForApp(id, isPreinstalled);
         }
         // Need to update the persisted list of apps since
         // installPreinstalledApp() removes the ones failing to install.
         this._saveApps();
       }
 
       // DataStores must be initialized at startup.
       for (let id in this.webapps) {
