# HG changeset patch
# Parent 33b4c63a0bf235d8563787e45b1c66919145e764
# User Antonio M. Amaya <amac@tid.es>

diff --git a/dom/apps/src/Webapps.js b/dom/apps/src/Webapps.js
--- a/dom/apps/src/Webapps.js
+++ b/dom/apps/src/Webapps.js
@@ -229,17 +229,17 @@ WebappsRegistry.prototype = {
                             this._prepareInstall(uri, request, aParams, true));
     }
 
     return request;
   },
 
   // nsIDOMGlobalPropertyInitializer implementation
   init: function(aWindow) {
-    this.initDOMRequestHelper(aWindow, "Webapps:Install:Return:OK");
+    this.initDOMRequestHelper(aWindow, "Webapps:Install:Return:OK", true);
 
     let util = this._window.QueryInterface(Ci.nsIInterfaceRequestor)
                            .getInterface(Ci.nsIDOMWindowUtils);
     this._id = util.outerWindowID;
     cpmm.sendAsyncMessage("Webapps:RegisterForMessages",
                           { messages: ["Webapps:Install:Return:OK"]});
 
     let principal = aWindow.document.nodePrincipal;
@@ -353,23 +353,23 @@ WebappsApplication.prototype = {
     this._ondownloadsuccess = null;
     this._ondownloaderror = null;
     this._ondownloadavailable = null;
     this._ondownloadapplied = null;
 
     this._downloadError = null;
 
     this.initDOMRequestHelper(aWindow, [
-      { name: "Webapps:CheckForUpdate:Return:KO", weakRef: true },
-      { name: "Webapps:Connect:Return:OK", weakRef: true },
-      { name: "Webapps:Connect:Return:KO", weakRef: true },
-      { name: "Webapps:FireEvent", weakRef: true },
-      { name: "Webapps:GetConnections:Return:OK", weakRef: true },
-      { name: "Webapps:UpdateState", weakRef: true }
-    ]);
+        { name: "Webapps:CheckForUpdate:Return:KO", weakRef: true },
+        { name: "Webapps:Connect:Return:OK", weakRef: true },
+        { name: "Webapps:Connect:Return:KO", weakRef: true },
+        { name: "Webapps:FireEvent", weakRef: true },
+        { name: "Webapps:GetConnections:Return:OK", weakRef: true },
+        { name: "Webapps:UpdateState", weakRef: true }
+      ], true);
 
     cpmm.sendAsyncMessage("Webapps:RegisterForMessages", {
       messages: ["Webapps:FireEvent",
                  "Webapps:UpdateState"],
       app: {
         id: this.id,
         manifestURL: this.manifestURL,
         installState: this.installState,
@@ -739,17 +739,18 @@ WebappsApplication.prototype = {
   */
 function WebappsApplicationMgmt(aWindow) {
   this.initDOMRequestHelper(aWindow, ["Webapps:GetAll:Return:OK",
                                       "Webapps:GetAll:Return:KO",
                                       "Webapps:Uninstall:Return:OK",
                                       "Webapps:Uninstall:Broadcast:Return:OK",
                                       "Webapps:Uninstall:Return:KO",
                                       "Webapps:Install:Return:OK",
-                                      "Webapps:GetNotInstalled:Return:OK"]);
+                                      "Webapps:GetNotInstalled:Return:OK"],
+                                      true);
 
   cpmm.sendAsyncMessage("Webapps:RegisterForMessages",
                         {
                           messages: ["Webapps:Install:Return:OK",
                                      "Webapps:Uninstall:Return:OK",
                                      "Webapps:Uninstall:Broadcast:Return:OK"]
                         }
                        );
diff --git a/dom/base/DOMRequestHelper.jsm b/dom/base/DOMRequestHelper.jsm
--- a/dom/base/DOMRequestHelper.jsm
+++ b/dom/base/DOMRequestHelper.jsm
@@ -39,16 +39,17 @@ this.DOMRequestIpcHelper = function DOMR
   //    "messagen": false
   //  }
   //
   // where each property is the name of the message and its value is a boolean
   // that indicates if the listener is weak or not.
   this._listeners = null;
   this._requests = null;
   this._window = null;
+  this.countListeners = false;
 }
 
 DOMRequestIpcHelper.prototype = {
   /**
    * An object which "inherits" from DOMRequestIpcHelper and declares its own
    * queryInterface method MUST implement Ci.nsISupportsWeakReference.
    */
   QueryInterface: XPCOMUtils.generateQI([Ci.nsISupportsWeakReference,
@@ -78,28 +79,33 @@ DOMRequestIpcHelper.prototype = {
 
     if (!Array.isArray(aMessages)) {
       aMessages = [aMessages];
     }
 
     aMessages.forEach((aMsg) => {
       let name = aMsg.name || aMsg;
       // If the listener is already set and it is of the same type we just
-      // bail out. If it is not of the same type, we throw an exception.
+      // increase the count and bail out. If it is not of the same type,
+      // we throw an exception.
       if (this._listeners[name] != undefined) {
-        if (!!aMsg.weakRef == this._listeners[name]) {
+        if (!!aMsg.weakRef == this._listeners[name].weakRef) {
+          this._listeners[name].numberOfListeners++;
           return;
         } else {
           throw Cr.NS_ERROR_FAILURE;
         }
       }
 
       aMsg.weakRef ? cpmm.addWeakMessageListener(name, this)
                    : cpmm.addMessageListener(name, this);
-      this._listeners[name] = !!aMsg.weakRef;
+      this._listeners[name] = {
+        weakRef: !!aMsg.weakRef,
+        numberOfListeners: 1
+      };
     });
   },
 
   /**
    * 'aMessages' is expected to be a string or an array of strings containing
    * the message names of the listeners to be removed.
    */
   removeMessageListeners: function(aMessages) {
@@ -111,19 +117,24 @@ DOMRequestIpcHelper.prototype = {
       aMessages = [aMessages];
     }
 
     aMessages.forEach((aName) => {
       if (this._listeners[aName] == undefined) {
         return;
       }
 
-      this._listeners[aName] ? cpmm.removeWeakMessageListener(aName, this)
-                             : cpmm.removeMessageListener(aName, this);
-      delete this._listeners[aName];
+      this._listeners[aName].numberOfListeners--;
+
+      if (!this.countListeners || !this._listeners[aName].numberOfListeners) {
+        this._listeners[aName].weakRef ?
+            cpmm.removeWeakMessageListener(aName, this)
+          : cpmm.removeMessageListener(aName, this);
+        delete this._listeners[aName];
+      }
     });
   },
 
   /**
    * Initialize the helper adding the corresponding listeners to the messages
    * provided as the second parameter.
    *
    * 'aMessages' is expected to be an array of either:
@@ -134,22 +145,23 @@ DOMRequestIpcHelper.prototype = {
    *      weakRef: false
    *    }
    *    where 'name' is the message identifier and 'weakRef' a boolean
    *    indicating if the listener should be a weak referred one or not.
    *
    *  - or only strings containing the message name, in which case the listener
    *    will be added as a strong referred one by default.
    */
-  initDOMRequestHelper: function(aWindow, aMessages) {
+  initDOMRequestHelper: function(aWindow, aMessages, aCountListeners) {
     // Query our required interfaces to force a fast fail if they are not
     // provided. These calls will throw if the interface is not available.
     this.QueryInterface(Ci.nsISupportsWeakReference);
     this.QueryInterface(Ci.nsIObserver);
 
+    this.countListeners = !!aCountListeners;
     if (aMessages) {
       this.addMessageListeners(aMessages);
     }
 
     this._id = this._getRandomId();
 
     this._window = aWindow;
     if (this._window) {
