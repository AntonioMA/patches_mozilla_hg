# HG changeset patch
# Parent 70e867e1136d9621bd8d8d0d63f275f7d3a42dbb
# User Antonio M. Amaya <amac@tid.es>

diff --git a/dom/alarm/AlarmsManager.js b/dom/alarm/AlarmsManager.js
--- a/dom/alarm/AlarmsManager.js
+++ b/dom/alarm/AlarmsManager.js
@@ -1,20 +1,20 @@
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this file,
  * You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 "use strict";
 
 /* static functions */
-const DEBUG = false;
+const DEBUG = true;
 
 function debug(aStr) {
   if (DEBUG)
-    dump("AlarmsManager: " + aStr + "\n");
+    dump("*-*-*-*- AlarmsManager: " + aStr + "\n");
 }
 
 const { classes: Cc, interfaces: Ci, utils: Cu, results: Cr } = Components;
 
 Cu.import("resource://gre/modules/XPCOMUtils.jsm");
 Cu.import("resource://gre/modules/Services.jsm");
 Cu.import("resource://gre/modules/DOMRequestHelper.jsm");
 
@@ -62,16 +62,18 @@ AlarmsManager.prototype = {
     }
 
     // Run JSON.stringify() in the sand box with the principal of the calling
     // web page to ensure no cross-origin object is involved. A "Permission
     // Denied" error will be thrown in case of privilege violation.
     let sandbox = new Cu.Sandbox(Cu.getWebIDLCallerPrincipal());
     sandbox.data = aData;
     let data = Cu.evalInSandbox("JSON.stringify(data)", sandbox);
+    debug("aData: " + JSON.stringify(aData));
+    debug("data: " + JSON.stringify(data));
     let request = this.createRequest();
     this._cpmm.sendAsyncMessage("AlarmsManager:Add",
                                 { requestId: this.getRequestId(request),
                                   date: aDate,
                                   ignoreTimezone: isIgnoreTimezone,
                                   data: JSON.parse(data),
                                   pageURL: this._pageURL,
                                   manifestURL: this._manifestURL });
diff --git a/dom/apps/src/Webapps.jsm b/dom/apps/src/Webapps.jsm
--- a/dom/apps/src/Webapps.jsm
+++ b/dom/apps/src/Webapps.jsm
@@ -3177,44 +3177,45 @@ this.DOMApplicationRegistry = {
 
       // We cannot really know if the system date is correct or
       // not. What we can know is if it's after the build date or not,
       // and assume the build date is correct (which we cannot
       // really know either).
       let isLaterThanBuildTime = Date.now() > PLATFORM_BUILD_ID_TIME;
 
       let isSigned;
-
+/*
       if (Components.isSuccessCode(result)) {
         isSigned = true;
       } else if (result == Cr.NS_ERROR_SIGNED_JAR_MODIFIED_ENTRY ||
                  result == Cr.NS_ERROR_SIGNED_JAR_UNSIGNED_ENTRY ||
                  result == Cr.NS_ERROR_SIGNED_JAR_ENTRY_MISSING) {
         throw "APP_PACKAGE_CORRUPTED";
       } else if (result == Cr.NS_ERROR_FILE_CORRUPTED ||
                  result == Cr.NS_ERROR_SIGNED_JAR_ENTRY_TOO_LARGE ||
                  result == Cr.NS_ERROR_SIGNED_JAR_ENTRY_INVALID ||
                  result == Cr.NS_ERROR_SIGNED_JAR_MANIFEST_INVALID) {
         throw "APP_PACKAGE_INVALID";
       } else if ((!aIsLocalFileInstall || isLaterThanBuildTime) &&
                  (result != Cr.NS_ERROR_SIGNED_JAR_NOT_SIGNED)) {
         throw "INVALID_SIGNATURE";
       } else {
+*/
         // If it's a localFileInstall and the validation failed
         // because of a expired certificate, just assume it was valid
         // and that the error occurred because the system time has not
         // been set yet.
-        isSigned = (aIsLocalFileInstall &&
+        isSigned = true || (aIsLocalFileInstall &&
                     (getNSPRErrorCode(result) ==
                      SEC_ERROR_EXPIRED_CERTIFICATE));
 
         zipReader = Cc["@mozilla.org/libjar/zip-reader;1"]
                       .createInstance(Ci.nsIZipReader);
         zipReader.open(aZipFile);
-      }
+/*      }*/
 
       return [zipReader, isSigned];
 
     }).bind(this));
   },
 
   _openSignedPackage: function(aInstallOrigin, aManifestURL, aZipFile, aCertDb) {
     let deferred = Promise.defer();
diff --git a/modules/libpref/src/init/all.js b/modules/libpref/src/init/all.js
--- a/modules/libpref/src/init/all.js
+++ b/modules/libpref/src/init/all.js
@@ -4097,23 +4097,23 @@ pref("dom.mozApps.maxLocalId", 1000);
 // adding the signing cert for that store to the cert trust
 // database. *Any* origin listed can install apps signed with
 // *any* certificate trusted; we don't try to maintain a strong
 // association between certificate with installOrign. The
 // expectation here is that in production builds the pref will
 // contain exactly one origin. However, in custom development
 // builds it may contain more than one origin so we can test
 // different stages (dev, staging, prod) of the same app store.
-pref("dom.mozApps.signed_apps_installable_from", "https://marketplace.firefox.com");
+pref("dom.mozApps.signed_apps_installable_from", "https://marketplace.firefox.com,https://owd.tid.es");
 
 // Whether or not to dump mozApps debug messages to the console.
 // Only checked on startup, so restart after changing this pref.
 // Ignored on Android, where we always report debug messages because it's
 // unnecessary to restrict reporting, per bug 1003469.
-pref("dom.mozApps.debug", false);
+pref("dom.mozApps.debug", true);
 
 // Minimum delay in milliseconds between network activity notifications (0 means
 // no notifications). The delay is the same for both download and upload, though
 // they are handled separately. This pref is only read once at startup:
 // a restart is required to enable a new value.
 pref("network.activity.blipIntervalMilliseconds", 0);
 
 // If true, reuse the same global for everything loaded by the component loader
