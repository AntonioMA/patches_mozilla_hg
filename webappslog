# HG changeset patch
# Parent 47102d191adf45871d4b25fa7e1dd7807670b3b7
# User Antonio M. Amaya <amac@tid.es>

diff --git a/dom/apps/src/AppsServiceChild.jsm b/dom/apps/src/AppsServiceChild.jsm
--- a/dom/apps/src/AppsServiceChild.jsm
+++ b/dom/apps/src/AppsServiceChild.jsm
@@ -12,17 +12,17 @@ const Ci = Components.interfaces;
 // Registry to content processes, to be used from the AppsService component.
 
 this.EXPORTED_SYMBOLS = ["DOMApplicationRegistry", "WrappedManifestCache"];
 
 Cu.import("resource://gre/modules/AppsUtils.jsm");
 Cu.import("resource://gre/modules/Services.jsm");
 
 function debug(s) {
-  //dump("-*- AppsServiceChild.jsm: " + s + "\n");
+  dump("-*- AppsServiceChild.jsm: " + s + "\n");
 }
 
 const APPS_IPC_MSG_NAMES = [
   "Webapps:AddApp",
   "Webapps:RemoveApp",
   "Webapps:UpdateApp",
   "Webapps:CheckForUpdate:Return:KO",
   "Webapps:FireEvent",
@@ -123,21 +123,21 @@ this.DOMApplicationRegistry = {
     this.webapps = null;
     this.DOMApps = null;
 
     APPS_IPC_MSG_NAMES.forEach((aMsgName) => {
       this.cpmm.removeMessageListener(aMsgName, this);
     });
 
     this.cpmm.sendAsyncMessage("Webapps:UnregisterForMessages",
-                               APPS_IPC_MSG_NAMES)
+                               APPS_IPC_MSG_NAMES);
   },
 
   receiveMessage: function receiveMessage(aMessage) {
-    debug("Received " + aMessage.name + " message.");
+    debug("Received " + aMessage.name + " message. MSG: " + JSON.stringify(aMessage.data));
     let msg = aMessage.data;
     switch (aMessage.name) {
       case "Webapps:AddApp":
         this.webapps[msg.id] = msg.app;
         this.localIdIndex[msg.app.localId] = msg.app;
         break;
       case "Webapps:RemoveApp":
         delete this.DOMApps[this.webapps[msg.id].manifestURL];
@@ -249,22 +249,24 @@ this.DOMApplicationRegistry = {
         DOMApplicationRegistry.webapps[aId][prop] = val;
         return;
       },
     };
   },
 
   _fireEvent: function(aMessage) {
     let msg = aMessage.data;
-    debug("_fireEvent " + JSON.stringify(msg));
+    debug("_fireEvent " + JSON.stringify(msg) + ". DA: " + this.DOMApps);
     if (!this.DOMApps || !msg.manifestURL || !msg.eventType) {
       return;
     }
 
     let DOMApps = this.DOMApps[msg.manifestURL];
+    debug("_fireEvent " + JSON.stringify(msg) + ". DA: " + this.DOMApps + ". DOMApps: " + JSON.stringify(DOMApps));
+
     if (!DOMApps) {
       return;
     }
 
     // The parent might ask childs to trigger more than one event in one
     // shot, so in order to avoid needless IPC we allow an array for the
     // 'eventType' IPC message field.
     if (!Array.isArray(msg.eventType)) {
diff --git a/dom/apps/src/Webapps.js b/dom/apps/src/Webapps.js
--- a/dom/apps/src/Webapps.js
+++ b/dom/apps/src/Webapps.js
@@ -33,16 +33,17 @@ function WebappsRegistry() {
 
 WebappsRegistry.prototype = {
   __proto__: DOMRequestIpcHelper.prototype,
 
   receiveMessage: function(aMessage) {
     let msg = aMessage.json;
     if (msg.oid != this._id)
       return
+    debug("receiveMessage: " + JSON.stringify(msg) + ": " + msg);
     let req = this.getRequest(msg.requestID);
     if (!req)
       return;
     let app = msg.app;
     switch (aMessage.name) {
       case "Webapps:Install:Return:OK":
         this.removeMessageListeners("Webapps:Install:Return:KO");
         Services.DOMRequest.fireSuccess(req, createApplicationObject(this._window, app));
@@ -542,16 +543,17 @@ WebappsApplication.prototype = {
 
   uninit: function() {
     this._onprogress = null;
     WrappedManifestCache.evict(this.manifestURL, this.innerWindowID);
   },
 
   _fireEvent: function(aName) {
     let handler = this["_on" + aName];
+    debug("fireEvent : " + aName + ". handler" + handler);
     if (handler) {
       let event = new this._window.MozApplicationEvent(aName, {
         application: this
       });
       try {
         handler.handleEvent(event);
       } catch (ex) {
         dump("Event handler expection " + ex + "\n");
diff --git a/dom/apps/src/Webapps.jsm b/dom/apps/src/Webapps.jsm
--- a/dom/apps/src/Webapps.jsm
+++ b/dom/apps/src/Webapps.jsm
@@ -75,19 +75,19 @@ XPCOMUtils.defineLazyGetter(this, "libcu
 // On Android, define the "debug" function as a binding of the "d" function
 // from the AndroidLog module so it gets the "debug" priority and a log tag.
 // We always report debug messages on Android because it's hard to use a debug
 // build on Android and unnecessary to restrict reporting, per bug 1003469.
 let debug = Cu.import("resource://gre/modules/AndroidLog.jsm", {})
               .AndroidLog.d.bind(null, "Webapps");
 #else
 function debug(aMsg) {
-#ifdef DEBUG
+//#ifdef DEBUG
   dump("-*- Webapps.jsm : " + aMsg + "\n");
-#endif
+//#endif
 }
 #endif
 
 function getNSPRErrorCode(err) {
   return -1 * ((err) & 0xffff);
 }
 
 function supportUseCurrentProfile() {
@@ -579,16 +579,17 @@ this.DOMApplicationRegistry = {
         }
       }
     }.bind(this)).then(null, Cu.reportError);
   },
 
   loadAndUpdateApps: function() {
     return Task.spawn(function() {
       let runUpdate = AppsUtils.isFirstRun(Services.prefs);
+      debug("loadAndUpdateApps: " + runUpdate);
 
       yield this.loadCurrentRegistry();
 
       if (runUpdate) {
 #ifdef MOZ_WIDGET_GONK
         yield this.installSystemApps();
 #endif
 
diff --git a/dom/apps/tests/test_signed_pkg_install.html b/dom/apps/tests/test_signed_pkg_install.html
--- a/dom/apps/tests/test_signed_pkg_install.html
+++ b/dom/apps/tests/test_signed_pkg_install.html
@@ -163,18 +163,18 @@ var steps = [
   },
   function() {
     info("== TEST == Install packaged app with origin");
     var miniManifestURL = gSJS + "?" +
                           "app=origin&" +
                           "version=1";
 
     navigator.mozApps.mgmt.oninstall = function(evt) {
-      info("Got oninstall event");
       gApp = evt.application;
+      info("Got oninstall event with state: " + gApp.installState);
       gApp.ondownloaderror = function() {
         ok(false, "Download should succeed (got error: " +
                   gApp.downloadError.name + ")");
         PackagedTestHelper.finish();
       };
       gApp.ondownloadsuccess = function() {
         info("App downloaded");
         var expected = {
